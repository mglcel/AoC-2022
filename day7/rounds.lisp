
(ql:quickload :cl-ppcre)

(defvar round1 0)

(defun build (in root)
	(let ((struct ()) )
		(do ((line (read-line in nil) (read-line in nil) ))
			((or (null line) (string= line "$ cd ..")))
				(ppcre:register-groups-bind (dir) ("\\$ cd ([^\\.].*)" line :sharedp t)
					(push (build in dir) struct)
				)
				(ppcre:register-groups-bind () ("\\$ ls" line :sharedp t)
					(do ( (last_pos (file-position in) (file-position in)) 
				      	      (nline (read-line in nil) (read-line in nil)) )
						( (or (null nline) (string= (char nline 0) "$"))
						  (file-position in last_pos) )
						(ppcre:register-groups-bind (size file) ("(\\d+) (.*)" nline :sharedp t)
							(push (list file (parse-integer size)) struct)
						)
					)
				)
		)
		(list root struct)
	)
)

(defun total (&optional file children)
	(let ( (size 0) (nc (list)) )
		(map nil #'(lambda (e) 
 	  		(if (integerp (first (last e)))
	    			(incf size (first (last e)))
	    			(let ((subtotal (total (first e) (second e))))
	      				(incf size (first(last subtotal)))
	      				(push subtotal nc)
	    			)
			)
		    ) children
    		)
		(when (<= size 100000) (incf round1 size) )
    		(list file nc size)
	)
)

(with-open-file (in "input.txt")
	(format T "~%")
	(let ((struct (first(second(build in "."))))(dirs)) 
		(setq dirs (total (first struct) (second struct)))
		; (print dirs) ; debug print structure
                (format T "round1 = ~a~%" round1)
	)
)

